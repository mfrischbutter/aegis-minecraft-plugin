plugins {
    id 'java'
    id 'eclipse'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.8'
    id 'xyz.jpenilla.run-velocity' version '2.3.1'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'com.luascript'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
}

dependencies {
    // Velocity API
    compileOnly 'com.velocitypowered:velocity-api:3.4.0-SNAPSHOT'
    annotationProcessor 'com.velocitypowered:velocity-api:3.4.0-SNAPSHOT'

    // Hibernate & Database
    implementation 'org.hibernate.orm:hibernate-core:6.4.4.Final'
    implementation 'org.hibernate.orm:hibernate-hikaricp:6.4.4.Final'
    implementation 'com.zaxxer:HikariCP:5.1.0'
    implementation 'net.bytebuddy:byte-buddy:1.14.12' // Required by Hibernate for bytecode enhancement

    // Database Drivers
    implementation 'com.mysql:mysql-connector-j:8.3.0'
    implementation 'org.mariadb.jdbc:mariadb-java-client:3.3.3'
    implementation 'org.postgresql:postgresql:42.7.3'

    // Caching
    implementation 'com.github.ben-manes.caffeine:caffeine:3.1.8'
    implementation 'org.ehcache:ehcache:3.10.8:jakarta'

    // Configuration (Configurate - maintained by Velocity team)
    implementation 'org.spongepowered:configurate-hocon:4.1.2'
    implementation 'org.spongepowered:configurate-yaml:4.1.2'

    // Discord Integration
    implementation 'club.minnced:discord-webhooks:0.8.4'

    // Utilities
    implementation 'com.google.guava:guava:33.0.0-jre'
    implementation 'org.jetbrains:annotations:24.1.0'

    // Logging (provided by Velocity)
    compileOnly 'org.slf4j:slf4j-api:2.0.12'

    // Testing
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
    testImplementation 'org.mockito:mockito-core:5.11.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.11.0'
    testImplementation 'org.assertj:assertj-core:3.25.3'
    testImplementation 'org.testcontainers:testcontainers:1.19.7'
    testImplementation 'org.testcontainers:mysql:1.19.7'
    testImplementation 'org.testcontainers:mariadb:1.19.7'
    testImplementation 'com.h2database:h2:2.2.224'
    testImplementation 'org.slf4j:slf4j-simple:2.0.12'
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = false
    }
}

tasks {
    shadowJar {
        archiveClassifier.set('')

        // Relocate dependencies to avoid conflicts with other plugins
        relocate 'org.hibernate', 'com.luascript.aegis.lib.hibernate'
        relocate 'net.bytebuddy', 'com.luascript.aegis.lib.bytebuddy' // Required by Hibernate
        relocate 'com.zaxxer.hikari', 'com.luascript.aegis.lib.hikari'
        relocate 'club.minnced', 'com.luascript.aegis.lib.webhook'
        relocate 'com.github.benmanes.caffeine', 'com.luascript.aegis.lib.caffeine'
        relocate 'org.spongepowered.configurate', 'com.luascript.aegis.lib.configurate'

        // Merge service files to preserve ServiceLoader functionality
        mergeServiceFiles()

        // Exclude unnecessary files
        exclude 'META-INF/*.SF'
        exclude 'META-INF/*.DSA'
        exclude 'META-INF/*.RSA'

        // Don't minimize - it removes plugin classes that Velocity needs
        // minimize()
    }

    build {
        dependsOn(shadowJar)
    }

    runVelocity {
        // Configure the Velocity version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        velocityVersion("3.4.0-SNAPSHOT")
    }
}

def targetJavaVersion = 17
java {
    toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.release.set(targetJavaVersion)
}

def templateSource = file('src/main/templates')
def templateDest = layout.buildDirectory.dir('generated/sources/templates')
def generateTemplates = tasks.register('generateTemplates', Copy) { task ->
    def props = ['version': project.version]
    task.inputs.properties props

    task.from templateSource
    task.into templateDest
    task.expand props
}

sourceSets.main.java.srcDir(generateTemplates.map { it.outputs })

project.idea.project.settings.taskTriggers.afterSync generateTemplates
project.eclipse.synchronizationTasks(generateTemplates)
